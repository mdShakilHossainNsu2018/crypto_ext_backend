version: '3.8'

services:
  django:
    build:
      # . mean inside current directory
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./:/usr/src/app
      - static_volume:/usr/src/app/staticfiles
    env_file:
      - ./.env.dev
    restart: unless-stopped
    command:
      - gunicorn
      - crypto_ext_backend.wsgi:application
      - --bind
      - 0.0.0.0:8000
#      - daphne -p 8001 crypto_ext_backend.asgi:application
    depends_on:
      - redis
      - rabbitmq
      - db

  db:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev
    restart: unless-stopped

  channel:
    image: django
    build:
      context: .
      dockerfile: Dockerfile.dev

    restart: unless-stopped
    volumes:
      - ./:/usr/src/app
    env_file:
      - ./.env.dev

    depends_on:
      - redis
      - rabbitmq
      - django
    command: "uvicorn --workers 5 crypto_ext_backend.asgi:application --host 0.0.0.0 --port 9000"

  celery_worker:
    image: django
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: sh -c "celery -A crypto_ext_backend worker -l info"
    volumes:
      - ./:/usr/src/app
    restart: unless-stopped
    depends_on:
      - django
      - db
    env_file:
      - ./.env.dev

  celery_beat:
    image: django
    build:
      context: .
      dockerfile: Dockerfile.dev
    command:  sh -c "celery -A crypto_ext_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    restart: unless-stopped
    volumes:
      - ./:/usr/src/app
    depends_on:
      - celery_worker
      - db
    env_file:
      - ./.env.dev

  nginx:
    build:
      context: ./nginx

    volumes:

      - ./:/usr/src/app
      - static_volume:/usr/src/app/staticfiles

    depends_on:
      - django
    restart: unless-stopped
    ports:
      - "8000:80"
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6378:6379"

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:latest
    ports:
      - "5672:5672"
    restart: unless-stopped

volumes:
    static_volume:
    postgres_data:




